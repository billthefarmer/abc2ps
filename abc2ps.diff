diff -c -x '*~' -x '*.exe' -x '*.ps' -x '*.diff' -x '*.tgz' -x '*.awk' -x '*.bat' -x '*.sh' ABC2PS-1.3.3.tar/abc2ps.c abc2ps/abc2ps.c
*** ABC2PS-1.3.3.tar/abc2ps.c	1999-03-17 17:56:56.000000000 +0000
--- abc2ps/abc2ps.c	2007-08-28 14:19:30.468750000 +0100
***************
*** 34,41 ****
  /* -------------- general macros ------------- */
  
  #define VERSION              "1.3"      /* version */
! #define REVISION             "3"        /* revison */
! #define VDATE        "Mar 17 1999"      /* version date */
  #define VERBOSE0           2            /* default verbosity */
  #define DEBUG_LV           0            /* debug output level */
  #define OUTPUTFILE      "Out.ps"        /* standard output file */
--- 34,41 ----
  /* -------------- general macros ------------- */
  
  #define VERSION              "1.3"      /* version */
! #define REVISION             "5wjf"     /* revison */
! #define VDATE        "Aug 28 2007"      /* version date */
  #define VERBOSE0           2            /* default verbosity */
  #define DEBUG_LV           0            /* debug output level */
  #define OUTPUTFILE      "Out.ps"        /* standard output file */
***************
*** 164,173 ****
  #define B_DBL        2             /* ||   thin double bar */
  #define B_LREP       3             /* |:   left repeat bar */
  #define B_RREP       4             /* :|   right repeat bar */
! #define B_DREP       5             /* ::   double repeat bar */
! #define B_FAT1       6             /* [|   thick at section start */
! #define B_FAT2       7             /* |]   thick at section end  */
! #define B_INVIS      8             /* invisible; for endings without bars */
  
  #define A_SH         1           /* codes for accidentals */
  #define A_NT         2
--- 164,174 ----
  #define B_DBL        2             /* ||   thin double bar */
  #define B_LREP       3             /* |:   left repeat bar */
  #define B_RREP       4             /* :|   right repeat bar */
! #define B_SREP       5             /* :    single repeat symbol */
! #define B_DREP       6             /* ::   double repeat bar */
! #define B_FAT1       7             /* [|   thick at section start */
! #define B_FAT2       8             /* |]   thick at section end  */
! #define B_INVIS      9             /* invisible; for endings without bars */
  
  #define A_SH         1           /* codes for accidentals */
  #define A_NT         2
***************
*** 509,514 ****
--- 510,516 ----
  int slur1[20],slur2[20];         /* needed for drawing slurs */
  int overfull;                    /* flag if staff overfull */
  int do_words;                    /* flag if staff has words under it */
+ int do_tab;			 /* flag if words are tablature */
  
  int vb, verbose;                 /* verbosity, global and within tune */
  int in_page=0;
***************
*** 592,598 ****
    
    /* ----- set default options and parse arguments ----- */
  
!   maxSyms = 800;
    maxVc   = 4;
  
    init_ops (1);
--- 594,600 ----
    
    /* ----- set default options and parse arguments ----- */
  
!   maxSyms = 1600;
    maxVc   = 4;
  
    init_ops (1);
diff -c -x '*~' -x '*.exe' -x '*.ps' -x '*.diff' -x '*.tgz' -x '*.awk' -x '*.bat' -x '*.sh' ABC2PS-1.3.3.tar/buffer.h abc2ps/buffer.h
*** ABC2PS-1.3.3.tar/buffer.h	1999-03-17 17:49:22.000000000 +0000
--- abc2ps/buffer.h	2005-03-24 17:14:04.000000000 +0000
***************
*** 103,109 ****
    }
  
    
!   if (strlen(info.comp)) fprintf (findex, "(   - %s) S\n", info.comp);
    
    if (cfmt.withxrefs) fprintf (findex, "(   [%s]) S\n", info.xref);
  
--- 103,109 ----
    }
  
    
!   if (strlen((char *) info.comp)) fprintf (findex, "(   - %s) S\n", info.comp);
    
    if (cfmt.withxrefs) fprintf (findex, "(   [%s]) S\n", info.xref);
  
diff -c -x '*~' -x '*.exe' -x '*.ps' -x '*.diff' -x '*.tgz' -x '*.awk' -x '*.bat' -x '*.sh' ABC2PS-1.3.3.tar/Changes abc2ps/Changes
*** ABC2PS-1.3.3.tar/Changes	1999-03-17 17:21:06.000000000 +0000
--- abc2ps/Changes	2007-08-28 14:17:25.250000000 +0100
***************
*** 1,3 ****
--- 1,16 ----
+ 28.08.07 Changed bars to include single repeat symbol ':', and to replace
+ 	 combinations ':|:', ': |:' and ': |:' with double repeat.
+ 	 Bill Farmer
+ 
+ ----- Version 1.3.5wjf
+ 
+ 28.01.07 Minor change to vocals logic to permit generation of CADB type
+          tablature for melodeon or possibly anglo concertina. Additional
+          postscript function to draw lines. Remove leading 'The' and
+          various non-alpha characters from generated file name.
+          Bill Farmer
+ 
+ ----- Version 1.3.4wjf
  
  17.03.99 Experimentally changed parsing so that the end of the header
           comes at the first music or V: line.  
diff -c -x '*~' -x '*.exe' -x '*.ps' -x '*.diff' -x '*.tgz' -x '*.awk' -x '*.bat' -x '*.sh' ABC2PS-1.3.3.tar/music.h abc2ps/music.h
*** ABC2PS-1.3.3.tar/music.h	1999-03-17 18:07:54.000000000 +0000
--- abc2ps/music.h	2007-08-28 13:54:44.703125000 +0100
***************
*** 220,225 ****
--- 220,226 ----
        if (symb[i].u==B_DBL)   printf ("double");
        if (symb[i].u==B_LREP)  printf ("left repeat");
        if (symb[i].u==B_RREP)  printf ("right repeat");
+       if (symb[i].u==B_SREP)  printf ("single repeat");
        if (symb[i].u==B_DREP)  printf ("double repeat");
        if (symb[i].u==B_FAT1)  printf ("thick-thin");
        if (symb[i].u==B_FAT2)  printf ("thin-thick");
***************
*** 757,762 ****
--- 758,764 ----
        else if (symb[i].u==B_DBL)   { symb[i].wl=7; symb[i].wr=4;  }
        else if (symb[i].u==B_LREP)  { symb[i].wl=3; symb[i].wr=12; }
        else if (symb[i].u==B_RREP)  { symb[i].wl=12; symb[i].wr=3; }
+       else if (symb[i].u==B_SREP)  { symb[i].wl=5; symb[i].wr=4;  }
        else if (symb[i].u==B_DREP)    symb[i].wl=symb[i].wr=12;
        else if (symb[i].u==B_FAT1)  { symb[i].wl=3;  symb[i].wr=9; }
        else if (symb[i].u==B_FAT2)  { symb[i].wl=9;  symb[i].wr=3; }
***************
*** 1697,1705 ****
      PUT1("%.1f dbar\n", x)
    else if (s.u==B_LREP) 
      PUT2("%.1f fbar1 %.1f rdots\n", x, x+10)
!   else if (s.u==B_RREP) {
      PUT2("%.1f fbar2 %.1f rdots\n", x, x-10)
!   }
    else if (s.u==B_DREP) {
      PUT2("%.1f fbar1 %.1f rdots\n", x-1, x+9)
      PUT2("%.1f fbar2 %.1f rdots\n", x+1, x-9)
--- 1699,1708 ----
      PUT1("%.1f dbar\n", x)
    else if (s.u==B_LREP) 
      PUT2("%.1f fbar1 %.1f rdots\n", x, x+10)
!   else if (s.u==B_RREP) 
      PUT2("%.1f fbar2 %.1f rdots\n", x, x-10)
!   else if (s.u==B_SREP)
!       PUT1("%.1f rdots\n", x)
    else if (s.u==B_DREP) {
      PUT2("%.1f fbar1 %.1f rdots\n", x-1, x+9)
      PUT2("%.1f fbar2 %.1f rdots\n", x+1, x-9)
***************
*** 1807,1813 ****
        if (sym[j].u!=B_INVIS)  mes++;
        if (mes==1) j1=j;
        if (sym[j].u==B_RREP || sym[j].u==B_DREP || sym[j].u==B_FAT2 ||
!           sym[j].u==B_LREP || sym[j].u==B_FAT1 || sym[j].v>0) {
          j0=j;
          break;
        }
--- 1810,1817 ----
        if (sym[j].u!=B_INVIS)  mes++;
        if (mes==1) j1=j;
        if (sym[j].u==B_RREP || sym[j].u==B_DREP || sym[j].u==B_FAT2 ||
!           sym[j].u==B_LREP || sym[j].u==B_SREP || sym[j].u==B_FAT1 ||
! 	  sym[j].v>0) {
          j0=j;
          break;
        }
***************
*** 3021,3026 ****
--- 3025,3031 ----
      ok=0;
      if (sym[j].type==BAR) {
        if (sym[j].u==B_RREP) ok=1;
+       if (sym[j].u==B_SREP) ok=1;
        if (sym[j].u==B_DREP) ok=1;
        if (sym[j].u==B_FAT1) ok=1;
        if (sym[j].u==B_FAT2) ok=1;
***************
*** 3044,3049 ****
--- 3049,3055 ----
      ok=0;
      if (sym[j].type==BAR) {
        if (sym[j].u==B_LREP) ok=1;
+       if (sym[j].u==B_SREP) ok=1;
        if (sym[j].u==B_DREP) ok=1;
        if (sym[j].u==B_FAT1) ok=1;
        if (sym[j].u==B_FAT2) ok=1;
***************
*** 3344,3353 ****
          k1=xp[j].p[v];
          k2=xp[i].p[v];
          if (k1>=0 && k2>=0) {
!           if (symv[v][k1].u==B_RREP && symv[v][k2].u==B_LREP) {
              symv[v][k2].u=B_DREP;
              symv[v][k1].u=B_INVIS;
              dx=-4.0;
            }
          }
        }
--- 3350,3365 ----
          k1=xp[j].p[v];
          k2=xp[i].p[v];
          if (k1>=0 && k2>=0) {
! 	  if (symv[v][k1].u==B_RREP && symv[v][k2].u==B_LREP) {
              symv[v][k2].u=B_DREP;
              symv[v][k1].u=B_INVIS;
              dx=-4.0;
+ 	  }
+ 	  else if ((symv[v][k1].u==B_SREP && symv[v][k2].u==B_LREP) ||
+ 		   (symv[v][k1].u==B_RREP && symv[v][k2].u==B_SREP)) {
+             symv[v][k2].u=B_DREP;
+             symv[v][k1].u=B_INVIS;
+             dx=-10.0;
            }
          }
        }
***************
*** 3448,3453 ****
--- 3460,3478 ----
    if (botnote-cfmt.vocalfont.size<yword) 
      yword=botnote-cfmt.vocalfont.size;
    
+   if (do_tab) {
+     PUT5("%.1f %.1f %.1f %.1f %.1f ln ", 0.0,
+ 	 yword-cfmt.vocalfont.size/4, cfmt.staffwidth/cfmt.scale,
+ 	 yword-cfmt.vocalfont.size/4, 0.5);
+     PUT5("%.1f %.1f %.1f %.1f %.1f ln ", 0.0,
+ 	 yword+lskip-cfmt.vocalfont.size/4, 0.0,
+ 	 yword-lskip-cfmt.vocalfont.size/4, 0.5);
+     PUT5("%.1f %.1f %.1f %.1f %.1f ln ", cfmt.staffwidth/cfmt.scale,
+ 	 yword+lskip-cfmt.vocalfont.size/4, cfmt.staffwidth/cfmt.scale,
+ 	 yword-lskip-cfmt.vocalfont.size/4, 0.5);
+     PUT2("(><) %.1f %.1f wd ", vfsize*swfac*cwid(' '), yword);
+     PUT2("(<>) %.1f %.1f wd\n", vfsize*swfac*cwid(' '), yword-lskip);
+   }
    for (j=0;j<nwl;j++) {
      hyflag=0;
      lastx=-10;
***************
*** 3480,3486 ****
          }
          else {
            tex_str (word,t,&w);
!           if (isdig(word[0])) 
              x0=x0-3*vfsize*swfac*cwid('1');
            else
              x0=x0-VOCPRE*vfsize*swfac*w;
--- 3505,3511 ----
          }
          else {
            tex_str (word,t,&w);
!           if (isdig(word[0]) && !do_tab && (j < 2)) 
              x0=x0-3*vfsize*swfac*cwid('1');
            else
              x0=x0-VOCPRE*vfsize*swfac*w;
***************
*** 3655,3660 ****
--- 3680,3686 ----
        p=xp[i].p[ivc0];
        u=symv[ivc0][p].u;
        if (u==B_LREP) u=B_FAT1;
+       if (u==B_SREP) u=B_FAT1;
        if (u==B_RREP) u=B_FAT2;
        ok=1;
        for (v=0;v<nvoice;v++) {
***************
*** 3664,3669 ****
--- 3690,3696 ----
            else {
              uu=symv[v][p].u;
              if (uu==B_LREP) uu=B_FAT1;
+             if (uu==B_SREP) uu=B_FAT1;
              if (uu==B_RREP) uu=B_FAT2;
              if (uu!=u) ok=0;
            }
diff -c -x '*~' -x '*.exe' -x '*.ps' -x '*.diff' -x '*.tgz' -x '*.awk' -x '*.bat' -x '*.sh' ABC2PS-1.3.3.tar/parse.h abc2ps/parse.h
*** ABC2PS-1.3.3.tar/parse.h	1999-03-17 15:53:06.000000000 +0000
--- abc2ps/parse.h	2007-08-28 12:31:58.187500000 +0100
***************
*** 1369,1376 ****
        symv[ivc][k].u=B_DREP;
        p++; }
      else {
!       syntax ("Syntax error parsing bar", p-1);
!       return 0;
      }
    }
  
--- 1369,1378 ----
        symv[ivc][k].u=B_DREP;
        p++; }
      else {
!       k=add_sym(BAR);
!       symv[ivc][k].u=B_SREP;
! /*       syntax ("Syntax error parsing bar", p-1); */
! /*       return 0; */
      }
    }
  
***************
*** 1967,1977 ****
--- 1969,1982 ----
    if ((line[0]!='w') || (line[1]!=':')) return 0;
    p0=line;
  
+   do_tab=1;
+ 
    isym=nsym0-1;
    c=line+2;
    for (;;) {
      while(*c==' ') c++;
      if (*c=='\0') break;
+     if (isalpha(*c) && (nwline<2)) do_tab=0;
      c1=c;
      if ((*c=='_') || (*c=='*') || (*c=='|') || (*c=='-')) {
        word[0]=*c; 
diff -c -x '*~' -x '*.exe' -x '*.ps' -x '*.diff' -x '*.tgz' -x '*.awk' -x '*.bat' -x '*.sh' ABC2PS-1.3.3.tar/subs.h abc2ps/subs.h
*** ABC2PS-1.3.3.tar/subs.h	1999-03-17 13:31:22.000000000 +0000
--- abc2ps/subs.h	2007-01-19 21:33:18.222816000 +0000
***************
*** 710,718 ****
--- 710,732 ----
    char *p,*q;
  
    p=title; q=fnm;
+ 
+   if ((strncmp(title, "The ", 4) == 0) ||
+       (strncmp(title, "the ", 4) == 0))
+       p += 4;
    while (*p != '\0') {
      if (*p == ' ') 
        *q = '_';
+     else if ((*p == '\\') ||
+ 	     (*p == '\'') ||
+ 	     (*p == '\"') ||
+ 	     (*p == '\`') ||
+ 	     (*p == '\{') ||
+ 	     (*p == '\}'))
+     {
+       p++;
+       continue;
+     }
      else
        *q = *p;
      p++; q++;
diff -c -x '*~' -x '*.exe' -x '*.ps' -x '*.diff' -x '*.tgz' -x '*.awk' -x '*.bat' -x '*.sh' ABC2PS-1.3.3.tar/syms.h abc2ps/syms.h
*** ABC2PS-1.3.3.tar/syms.h	1998-08-15 14:32:54.000000000 +0100
--- abc2ps/syms.h	2007-08-28 12:20:07.531250000 +0100
***************
*** 40,45 ****
--- 40,48 ----
    fprintf (fp,
             "/whf {moveto gsave 0.5 1.2 scale (-) show grestore} bind def\n");
  
+   fprintf (fp,
+ 	   "/ln {gsave setlinewidth moveto lineto stroke grestore\n"
+ 	   "} bind def\n");
  }
  
  /* ----- def_typset ------- */
***************
*** 293,299 ****
    add_cv (fp,f1,f2,s,1,2);
    fprintf (fp, "   fill\n} bind def\n");
    
!   fprintf (fp, "\n/emb {  %% usage:  y emb  - empahsis bar\n"
             "  gsave 1.4 setlinewidth 1 setlinecap x exch moveto \n"
             " -3.5 0 rmoveto 7 0 rlineto stroke grestore\n"
             "} bind def\n");
--- 296,302 ----
    add_cv (fp,f1,f2,s,1,2);
    fprintf (fp, "   fill\n} bind def\n");
    
!   fprintf (fp, "\n/emb {  %% usage:  y emb  - emphasis bar\n"
             "  gsave 1.4 setlinewidth 1 setlinecap x exch moveto \n"
             " -3.5 0 rmoveto 7 0 rlineto stroke grestore\n"
             "} bind def\n");
